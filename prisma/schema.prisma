generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String?
  role            UserRole         @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  apiTokens       ApiToken[]
  userPlan        UserPlan?
  ebayConnections EbayConnection[]
  ebayUserTokens  EbayUserToken[]

  @@map("users")
}

model ApiToken {
  id          String    @id @default(cuid())
  name        String
  token       String    @unique
  userId      String
  permissions Json      @default("{}")
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiUsage    ApiUsage[]

  @@map("api_tokens")
}

model EbayConnection {
  id             String          @id @default(cuid())
  name           String
  clientId       String
  clientSecret   String
  environment    String
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ebayUserTokens EbayUserToken[]

  @@map("ebay_connections")
}

model EbayUserToken {
  id           String         @id @default(cuid())
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  tokenType    String         @default("Bearer")
  userId       String
  connectionId String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  connection   EbayConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, connectionId])
  @@map("ebay_user_tokens")
}

model UserPlan {
  id                 String    @id @default(cuid())
  userId             String    @unique
  planName           String    @default("FREE")
  monthlyApiLimit    Int       @default(1000)
  allowedEndpoints   Json      @default("[]")
  isActive           Boolean   @default(true)
  startedAt          DateTime  @default(now())
  expiresAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_plans")
}

model ApiUsage {
  id                    String    @id @default(cuid())
  apiTokenId            String
  endpoint              String
  method                String
  statusCode            Int
  responseTimeMs        Int?
  errorMessage          String?
  requestIp             String?
  userAgent             String?
  createdAt             DateTime  @default(now())
  apiToken              ApiToken  @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)

  @@index([apiTokenId])
  @@index([createdAt])
  @@index([endpoint])
  @@map("api_usage")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}
